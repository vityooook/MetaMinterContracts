#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/op-codes.fc";
#include "imports/constants.fc";

global slice owner_address; ;; 267
global slice admin_address; ;; 267
global slice commission_address; ;; 267
global int available; ;; 1
global int price; ;; 124
global int last_index; ;; 32
global int buyer_limit; ;; 32
global int start_time; ;; 32 
global int end_time; ;; 32 
global int commission; ;; 124

global cell content_collection; ;; rer
global cell nft_item_code; ;; ref

const int message_commission = 11000000;
const json_uri_end = ".json";
;; const offchain_metadata_tag = 0x01;


() load_data() impure inline {
  var ds = get_data().begin_parse(); ;; Bits = 2 + 124 + 32 + 32 + 32 + 32 + 124 = 378 Ref = 3
  available = ds~load_int(2);
  price = ds~load_coins();
  last_index = ds~load_uint(32);
  buyer_limit = ds~load_uint(32);
  start_time = ds~load_uint(32);
  end_time = ds~load_uint(32);
  commission = ds~load_coins();
  content_collection = ds~load_ref();
  nft_item_code = ds~load_ref();

  var ds2 = ds~load_ref().begin_parse(); ;; Bits = 267 + 267 + 267 = 801
  owner_address = ds2~load_msg_addr();
  admin_address = ds2~load_msg_addr();
  commission_address = ds2~load_msg_addr();

}

() save_data() impure {
  set_data(begin_cell()
    .store_int(available, 2)
    .store_coins(price)
    .store_uint(last_index, 32)
    .store_uint(buyer_limit, 32)
    .store_uint(start_time, 32)
    .store_uint(end_time, 32)
    .store_coins(commission)
    .store_ref(content_collection)
    .store_ref(nft_item_code)
    .store_ref(
        begin_cell()
            .store_slice(owner_address)
            .store_slice(admin_address)
            .store_slice(commission_address)
        .end_cell()
    )
  .end_cell());
}



cell pack_offchain_metadata(int index)  {
    var content = begin_cell().store_number_as_slice(index).store_slice(json_uri_end).end_cell();
    return begin_cell().store_ref(content).end_cell();
}

cell calculate_nft_item_state_init(int item_index) {
  cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
  return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
  return begin_cell().store_uint(4, 3)
                     .store_int(wc, 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

() deploy_nft_item(int item_index, slice sender_address, cell content_item) impure {
  cell state_init = calculate_nft_item_state_init(item_index);
  slice nft_address = calculate_nft_item_address(workchain(), state_init);
  var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(nft_address)
            .store_coins(30000000)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(begin_cell()
                .store_slice(sender_address)
                .store_ref(content_item)
                .end_cell());
  send_raw_message(msg.end_cell(), 1); 
}

() send_message(slice destination_address, int amount, builder payload, int send_mode) impure { ;; —Ç—É—Ç –Ω—É–∂–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å 
  var msg_body = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(destination_address)
    .store_coins(amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
  
  if (~ builder_null?(payload)) {
    msg_body = msg_body.store_builder(payload);
  }

  send_raw_message(msg_body.end_cell(), send_mode);
} 

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    load_data();
    
    if (op == 1) { ;; buy
        int quantity = in_msg_body~load_uint(32);

        if (msg_value < quantity * price) { ;; –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ 
            builder payload = begin_cell().store_uint(0, 32).store_slice("Not enough funds üí∞");
            send_message(sender_address, 0, payload, 64);
            return ();
        }
        ifnot (available) { ;; –ø—Ä–æ–¥–∞–∂–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞
            builder payload = begin_cell().store_uint(0, 32).store_slice("Sale is temporarily unavailable üö´");
            send_message(sender_address, 0, payload, 64);
            return ();
        }
        ifnot ((now() >= start_time) & (now() <= end_time) | (start_time == end_time) | ((now() >= start_time) & (end_time == 0)) | ((start_time == 0) & (now() <= end_time))) { ;; nft –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Å–≤—è–∑–∏ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
            builder payload = begin_cell().store_uint(0, 32).store_slice("NFT is not available at this time ‚è≥");
            send_message(sender_address, 0, payload, 64);
            return ();
        }
        ifnot ((quantity + last_index < buyer_limit) | (buyer_limit == 0)) { ;; —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω—ã –≤—Å–µ nft
            if (buyer_limit - last_index > 0) { 
                quantity = buyer_limit - last_index;
                builder payload = begin_cell().store_uint(0, 32).store_slice("You can only mint ").store_number_as_slice(quantity).store_slice(" NFT ‚ö°Ô∏è");
                int return_ton = msg_value - (quantity * price) - 20000000;
                send_message(sender_address, return_ton, payload, 0);

                repeat (quantity) {
                    cell content_item = pack_offchain_metadata(last_index);
                    deploy_nft_item(last_index, sender_address, content_item);
                    last_index += 1;
                }

                send_message(commission_address, commission * quantity, null(), 1); ;; comission
                raw_reserve(50000000, 0); ;; 0.05 TON
                send_message(owner_address, 0, null(), 128); ;; Payments to the owner
                save_data();
                return ();
            } else {
            builder payload = begin_cell().store_uint(0, 32).store_slice("All NFTs are already sold out ‚õî");
            send_message(sender_address, 0, payload, 64);
            return ();
            }
        }

        repeat (quantity) {
            cell content_item = pack_offchain_metadata(last_index);
            deploy_nft_item(last_index, sender_address, content_item);
            last_index += 1;
        }
        
        send_message(commission_address, commission * quantity, null(), 1); ;; comission
        builder payload = begin_cell().store_uint(0, 32).store_slice("NFT purchase will be a success ‚úÖ");
        send_message(sender_address, message_commission, payload, 1); ;; message to buyer

        raw_reserve(50000000, 0); ;; 0.05 TON
        send_message(owner_address, 0, null(), 128); ;; Payments to the owner
        save_data();
        return ();
    }

    throw_unless(error::not_owner_admin, (equal_slices(sender_address, owner_address) | equal_slices(sender_address, admin_address)));

    if (op == 2) { ;; deploy new nft
        throw_unless(error::not_admin, equal_slices(sender_address, admin_address));
        int item_index = in_msg_body~load_uint(32);
        slice future_owner = in_msg_body~load_msg_addr();
        cell content_item = in_msg_body~load_ref();
        throw_unless(error::index, item_index <= last_index);
        var is_last = item_index == last_index;
        deploy_nft_item(last_index, future_owner, content_item);
        if (is_last) {
            last_index += 1;
            save_data();
        }
        return ();
    }

    if (op == 3) { ;; –≤ –±—É–¥—É—é—â–µ–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å –Ω—É–ª–µ–≤—ã–º –∞–¥—Ä–µ—Å–æ–º 
        price = in_msg_body~load_coins();
        buyer_limit = in_msg_body~load_uint(32);
        start_time = in_msg_body~load_uint(32);
        end_time = in_msg_body~load_uint(32);
        available = in_msg_body~load_int(2);
        owner_address = in_msg_body~load_msg_addr();

        if (equal_slices(owner_address, "UQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJKZ"a)) {
            admin_address = owner_address; ;; nft to null address
        }

        throw_unless(error::buyer_limit_incorrect, (buyer_limit > last_index) | (buyer_limit == 0));
        throw_if(error::min_price, price < 200000000); ;; 0.2 ton

        save_data();
        return ();
    }

    if (op == 4) {
        if (in_msg_body.slice_bits() > 267) {
            slice referral_address = in_msg_body~load_msg_addr();
            int amount = in_msg_body~load_coins();
            builder payload = begin_cell().store_uint(0, 32).store_slice("Referral commission üö®");
            if (amount == 0) {
                raw_reserve(5000000, 0); ;; 0.005 TON
                send_message(referral_address, amount, payload, 128);
                return ();
            } else {
                send_message(referral_address, amount, payload, 1);
                raw_reserve(5000000, 0); ;; 0.005 TON
                send_message(commission_address, 0, null(), 128);
                return ();
            }
        } else {
            raw_reserve(5000000, 0); ;; 0.005 TON
            send_message(commission_address, 0, null(), 128);
            return ();
        }
    }

    if (op == 5) { ;; edit content and comission
        throw_unless(error::not_admin, equal_slices(sender_address, admin_address));
        commission = in_msg_body~load_coins();
        content_collection = in_msg_body~load_ref();
        save_data();
        return ();
    }

    if (op == 8) {
        throw_unless(error::not_admin, equal_slices(sender_address, admin_address));
        (cell new_data, cell new_code) = (in_msg_body~load_ref(), in_msg_body~load_ref());
        set_data(new_data);
        set_code(new_code);
        return ();
    }

    throw(0xffff);
}

;; Get methods

(int, cell, slice) get_collection_data() method_id {
  load_data();
  slice cs = content_collection.begin_parse();
  return (last_index, cs~load_ref(), owner_address);
}

slice get_nft_address_by_index(int index) method_id {
    load_data();
    cell state_init = calculate_nft_item_state_init(index);
    return calculate_nft_item_address(0, state_init);
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
  load_data();
  slice cs = content_collection.begin_parse();
  cs~load_ref();
  slice common_content = cs~load_ref().begin_parse();
  return (begin_cell()
                      .store_uint(1, 8) ;; offchain tag
                      .store_slice(common_content)
                      .store_ref(individual_nft_content)
          .end_cell());
}

(slice, slice, int, int, int, int, int, int, int, cell, cell) get_all_information() method_id {
  load_data();
  cell content_item_raw = begin_cell().store_number_as_slice(1).store_slice(".json").end_cell();
  cell content_item = begin_cell().store_ref(content_item_raw).end_cell();

  slice cs = content_collection.begin_parse();
  return (
    owner_address,
    admin_address,
    ;; commission_address,
    available,
    price,
    last_index,
    buyer_limit,
    start_time,
    end_time,
    commission,
    cs~load_ref(), ;; content_collection
    content_item
  );
}
